name: Build and publish wheels

on:
  push:
    tags:
      - '*'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  binary:
    name: build on ${{ matrix.os }} (${{ matrix.target }}) (${{ matrix.manylinux || 'auto' }})
    strategy:
      fail-fast: false
      matrix:
        include:
          # manylinux targets
          - os: linux
            target: x86_64
          - os: linux
            target: x86
          - os: linux
            target: aarch64
          - os: linux
            target: armv7
          - os: linux
            target: ppc64le
          - os: linux
            target: s390x

          # musllinux targets
          - os: linux
            target: x86_64
            manylinux: musllinux_1_2
          - os: linux
            target: x86
            manylinux: musllinux_1_2
          - os: linux
            target: aarch64
            manylinux: musllinux_1_2
          - os: linux
            target: armv7
            manylinux: musllinux_1_2

          # windows
          - os: windows
            target: x86_64
          - os: windows
            python-architecture: x86
            target: x86

          # macos
          - os: macos
            target: x86_64
          - os: macos
            target: aarch64

    runs-on: ${{ (matrix.os == 'linux' && 'ubuntu') || matrix.os }}-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        if : ${{ matrix.os == 'windows' }}
        with:
          python-version: '3.13'
          architecture: ${{ matrix.python-architecture || 'x64' }}
          allow-prereleases: true
      - name: Generate third-party license information
        run: |
          cargo install cargo-3pl --version 0.1.3
          cargo 3pl > LICENSE-THIRD-PARTY
      - name: build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --strip --out dist --interpreter '3.9 3.10 3.11 3.12 3.13'
          manylinux: ${{ matrix.manylinux || 'auto' }}
          sccache: 'true'
          rust-toolchain: "1.85"
      - run: pip install -U twine packaging
      - run: twine check --strict dist/*
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-binary-${{ matrix.os }}-${{ matrix.target }}-${{ matrix.manylinux || 'auto' }}
          path: dist/*

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        run: |
          pip install build
          python -m build --sdist --outdir dist
      - run: pip install -U twine packaging
      - run: twine check --strict dist/*
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist/*

  release:
    name: Release
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: [binary, sdist]
    steps:
      - uses: actions/download-artifact@v4
      - run: pip install -U twine packaging
      - name: Publish to PyPI
        run: |
          twine upload --non-interactive --disable-progress-bar --skip-existing wheels-*/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
