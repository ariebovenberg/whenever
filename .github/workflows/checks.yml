name: Checks

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  test-python-versions:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [
          "3.9",
          "3.10",
          "3.11",
          "3.12",
          "3.13",
        ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: "1.85"
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: "Test Rust"
        if: ${{ (matrix.os == 'ubuntu-latest') && (matrix.python-version == '3.12') }}
        run: |
          cargo test

      - name: Install and test
        shell: bash
        run: |
          pip install .
          pip install -r requirements/test.txt
          pytest tests/

  test-os:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: "1.85"

      - name: Add win32 target
        if: ${{ matrix.os == 'windows-latest' }}
        run: rustup target add i686-pc-windows-msvc

      - uses: actions/setup-python@v5
        if: ${{ !(matrix.os == 'windows-latest') }}
        with:
          python-version: '3.13'

      # ensure 32-bit target is tested
      # FUTURE: Add a linux 32-bit target
      - uses: actions/setup-python@v5
        if: ${{ matrix.os == 'windows-latest' }}
        with:
          python-version: '3.13'
          architecture: x86


      - name: Install and test
        shell: bash
        run: |
          pip install -e .
          pip install -r requirements/test.txt
          pytest tests/

  test-pure-python:
    name: Test pure Python version
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [
          "3.9",
          "3.10",
          "3.11",
          "3.12",
          "3.13",
          # # NOTE: pypy/pytest fails sometimes (https://github.com/pypy/pypy/issues/3959)
          "pypy3.9",
          "pypy3.10"
        ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      # only run coverage once
      - if: ${{ matrix.python-version == '3.12' }}
        run: |
          pip install .
          pip install -r requirements/test.txt
          pytest tests/ --cov=whenever --cov-report=xml
        env:
          WHENEVER_NO_BUILD_RUST_EXT: "1"
      - run: |
          pip install .
          pip install -r requirements/test.txt
          pytest tests/
        env:
          WHENEVER_NO_BUILD_RUST_EXT: "1"

  lint:
    name: Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: "1.85"
          components: "clippy, rustfmt"
      - run: |
          pip install .
          pip install -U pip
          pip install -r requirements/lint.txt
          make ci-lint
        env:
          WHENEVER_NO_BUILD_RUST_EXT: "1"

  check-docstrings:
    name: Ensure docstrings in Rust/Python are synced
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - run: |
          pip install .
          python generate_docstrings.py > fresh_docstrings.rs
          if diff -q fresh_docstrings.rs src/docstrings.rs > /dev/null; then
              echo "OK"
          else
              echo "Rust docstrings are stale. Please run 'python generate_docstrings.py > src/docstrings.rs'";
              # output the actual diff
              diff -u fresh_docstrings.rs src/docstrings.rs
              exit 1
          fi
        env:
          WHENEVER_NO_BUILD_RUST_EXT: "1"
  typecheck:
    name: Typecheck Python code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - run: |
          pip install .
          pip install -r requirements/typecheck.txt
          pip install -r requirements/test.txt
          make typecheck
        env:
          WHENEVER_NO_BUILD_RUST_EXT: "1"

  # https://github.com/marketplace/actions/alls-green#why
  all-green:
    name: Are all checks green?
    if: always()
    needs:
      - test-python-versions
      - test-os
      - test-pure-python
      - lint
      - check-docstrings
      - typecheck
    runs-on: ubuntu-latest

    steps:
    - name: Decide whether the needed jobs succeeded or failed
      uses: re-actors/alls-green@release/v1
      with:
        jobs: ${{ toJSON(needs) }}
