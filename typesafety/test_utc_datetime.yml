- case: ymd_arguments
  regex: true
  main: |
    from whenever import UTCDateTime
    d = UTCDateTime(2020, 8, 9)
    d = UTCDateTime(2020, 8, '15')  # E: .*incompatible type "str".* "int"
- case: strict_equality
  regex: true
  main: |
    from whenever import UTCDateTime, ZonedDateTime
    from typing import Union
    d = UTCDateTime(2020, 8, 9)
    d == 3  # E: .*comparison.*
    e: Union[UTCDateTime, ZonedDateTime] = ZonedDateTime(2020, 1, 1, tz="Iceland")
    d == e
- case: addition
  regex: true
  main: |
    from whenever import UTCDateTime, TimeDelta
    d = UTCDateTime(2020, 8, 9)
    reveal_type(d + TimeDelta(hours=4))  # N: .*whenever.UTCDateTime
    d + 12  # E: .*Unsupported
- case: subtraction
  regex: true
  main: |
    from whenever import UTCDateTime, TimeDelta
    d = UTCDateTime(2020, 8, 9)
    reveal_type(d - TimeDelta(hours=4))  # N: .*type is "whenever.UTCDateTime"
    reveal_type(d - d)  # N: .*type is "whenever.TimeDelta
- case: replace
  regex: true
  main: |
    from whenever import UTCDateTime
    d = UTCDateTime(2020, 8, 9)
    d.replace(tzinfo=None)  # E: .*Unexpected keyword.*tzinfo.*
    d.replace(fold=None)  # E: .*Unexpected keyword.*fold.*
- case: as_offset
  regex: true
  main: |
    from whenever import UTCDateTime, hours
    d = UTCDateTime(2020, 8, 9)
    d.as_offset()
    d.as_offset(hours(1))
    d.as_offset(None)
  out: |
    main:5: E: .*overload
    main:5: N: .*
    main:5: N: .*
    main:5: N: .*
