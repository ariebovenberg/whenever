- case: strict_equality
  regex: true
  main: |
    from whenever import ZonedDateTime
    d = ZonedDateTime(2020, 8, 9, tz="Iceland")
    d == 3  # E: .*comparison.*
- case: addition
  regex: true
  main: |
    from whenever import ZonedDateTime, TimeDelta
    d = ZonedDateTime(2020, 8, 9, tz="Iceland")
    reveal_type(d + TimeDelta(hours=4))  # N: .*whenever.ZonedDateTime
    d + 12  # E: .*Unsupported

- case: subtraction
  regex: true
  main: |
    from whenever import ZonedDateTime, TimeDelta
    d = ZonedDateTime(2020, 8, 9, tz="Iceland")
    reveal_type(d - TimeDelta(hours=4))  # N: .*type is "whenever.ZonedDateTime"
    reveal_type(d - d)  # N: .*type is "whenever.TimeDelta
- case: replace
  regex: true
  main: |
    from whenever import ZonedDateTime
    d = ZonedDateTime(2020, 8, 9, tz="Iceland")
    d.replace(tzinfo=None)  # E: .*Unexpected keyword.*tzinfo.*
